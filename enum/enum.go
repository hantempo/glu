package enum

import "fmt"

const (
	GL_NONE                                      = 0x00000000
	GL_BYTE                                      = 0x00001400
	GL_UNSIGNED_BYTE                             = 0x00001401
	GL_SHORT                                     = 0x00001402
	GL_UNSIGNED_SHORT                            = 0x00001403
	GL_INT                                       = 0x00001404
	GL_UNSIGNED_INT                              = 0x00001405
	GL_FLOAT                                     = 0x00001406
	GL_HALF_FLOAT                                = 0x0000140B
	GL_UNSIGNED_BYTE_3_3_2                       = 0x00008032
	GL_UNSIGNED_SHORT_4_4_4_4                    = 0x00008033
	GL_UNSIGNED_SHORT_5_5_5_1                    = 0x00008034
	GL_UNSIGNED_INT_8_8_8_8                      = 0x00008035
	GL_UNSIGNED_INT_10_10_10_2                   = 0x00008036
	GL_RED                                       = 0x00001903
	GL_GREEN                                     = 0x00001904
	GL_BLUE                                      = 0x00001905
	GL_ALPHA                                     = 0x00001906
	GL_RGB                                       = 0x00001907
	GL_RGBA                                      = 0x00001908
	GL_LUMINANCE                                 = 0x00001909
	GL_LUMINANCE_ALPHA                           = 0x0000190A
	GL_ETC1_RGB8_OES                             = 0x00008D64
	GL_COMPRESSED_R11_EAC                        = 0x00009270
	GL_COMPRESSED_SIGNED_R11_EAC                 = 0x00009271
	GL_COMPRESSED_RG11_EAC                       = 0x00009272
	GL_COMPRESSED_SIGNED_RG11_EAC                = 0x00009273
	GL_COMPRESSED_RGB8_ETC2                      = 0x00009274
	GL_COMPRESSED_SRGB8_ETC2                     = 0x00009275
	GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2  = 0x00009276
	GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x00009277
	GL_COMPRESSED_RGBA8_ETC2_EAC                 = 0x00009278
	GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC          = 0x00009279
	GL_COMPRESSED_RGBA_ASTC_4x4_KHR              = 0x000093B0
	GL_COMPRESSED_RGBA_ASTC_5x4_KHR              = 0x000093B1
	GL_COMPRESSED_RGBA_ASTC_5x5_KHR              = 0x000093B2
	GL_COMPRESSED_RGBA_ASTC_6x5_KHR              = 0x000093B3
	GL_COMPRESSED_RGBA_ASTC_6x6_KHR              = 0x000093B4
	GL_COMPRESSED_RGBA_ASTC_8x5_KHR              = 0x000093B5
	GL_COMPRESSED_RGBA_ASTC_8x6_KHR              = 0x000093B6
	GL_COMPRESSED_RGBA_ASTC_8x8_KHR              = 0x000093B7
	GL_COMPRESSED_RGBA_ASTC_10x5_KHR             = 0x000093B8
	GL_COMPRESSED_RGBA_ASTC_10x6_KHR             = 0x000093B9
	GL_COMPRESSED_RGBA_ASTC_10x8_KHR             = 0x000093BA
	GL_COMPRESSED_RGBA_ASTC_10x10_KHR            = 0x000093BB
	GL_COMPRESSED_RGBA_ASTC_12x10_KHR            = 0x000093BC
	GL_COMPRESSED_RGBA_ASTC_12x12_KHR            = 0x000093BD
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR      = 0x000093D0
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR      = 0x000093D1
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR      = 0x000093D2
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR      = 0x000093D3
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR      = 0x000093D4
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR      = 0x000093D5
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR      = 0x000093D6
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR      = 0x000093D7
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR     = 0x000093D8
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR     = 0x000093D9
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR     = 0x000093DA
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR    = 0x000093DB
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR    = 0x000093DC
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR    = 0x000093DD
)

var typeStrings = map[uint32]string{
	GL_NONE:                    "GL_NONE",
	GL_BYTE:                    "GL_BYTE",
	GL_UNSIGNED_BYTE:           "GL_UNSIGNED_BYTE",
	GL_SHORT:                   "GL_SHORT",
	GL_UNSIGNED_SHORT:          "GL_UNSIGNED_SHORT",
	GL_INT:                     "GL_INT",
	GL_UNSIGNED_INT:            "GL_UNSIGNED_INT",
	GL_FLOAT:                   "GL_FLOAT",
	GL_HALF_FLOAT:              "GL_HALF_FLOAT",
	GL_UNSIGNED_BYTE_3_3_2:     "GL_UNSIGNED_BYTE_3_3_2",
	GL_UNSIGNED_SHORT_4_4_4_4:  "GL_UNSIGNED_SHORT_4_4_4_4",
	GL_UNSIGNED_SHORT_5_5_5_1:  "GL_UNSIGNED_SHORT_5_5_5_1",
	GL_UNSIGNED_INT_8_8_8_8:    "GL_UNSIGNED_INT",
	GL_UNSIGNED_INT_10_10_10_2: "GL_UNSIGNED_INT_10_10_10_2",
}

func TypeString(e uint32) string {
	if s, ok := typeStrings[e]; ok {
		return s
	} else {
		return fmt.Sprintf("Invalid type(0x%X)", e)
	}
}

var formatStrings = map[uint32]string{
	GL_NONE:                                      "GL_NONE",
	GL_RED:                                       "GL_RED",
	GL_GREEN:                                     "GL_GREEN",
	GL_BLUE:                                      "GL_BLUE",
	GL_ALPHA:                                     "GL_ALPHA",
	GL_RGB:                                       "GL_RGB",
	GL_RGBA:                                      "GL_RGBA",
	GL_LUMINANCE:                                 "GL_LUMINANCE",
	GL_LUMINANCE_ALPHA:                           "GL_LUMINANCE_ALPHA",
	GL_ETC1_RGB8_OES:                             "GL_ETC1_RGB8_OES",
	GL_COMPRESSED_R11_EAC:                        "GL_COMPRESSED_R11_EAC",
	GL_COMPRESSED_SIGNED_R11_EAC:                 "GL_COMPRESSED_SIGNED_R11_EAC",
	GL_COMPRESSED_RG11_EAC:                       "GL_COMPRESSED_RG11_EAC",
	GL_COMPRESSED_SIGNED_RG11_EAC:                "GL_COMPRESSED_SIGNED_RG11_EAC",
	GL_COMPRESSED_RGB8_ETC2:                      "GL_COMPRESSED_RGB8_ETC2",
	GL_COMPRESSED_SRGB8_ETC2:                     "GL_COMPRESSED_SRGB8_ETC2",
	GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:  "GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2",
	GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: "GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2",
	GL_COMPRESSED_RGBA8_ETC2_EAC:                 "GL_COMPRESSED_RGBA8_ETC2_EAC",
	GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:          "GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC",
	GL_COMPRESSED_RGBA_ASTC_4x4_KHR:              "GL_COMPRESSED_RGBA_ASTC_4x4_KHR",
	GL_COMPRESSED_RGBA_ASTC_5x4_KHR:              "GL_COMPRESSED_RGBA_ASTC_5x4_KHR",
	GL_COMPRESSED_RGBA_ASTC_5x5_KHR:              "GL_COMPRESSED_RGBA_ASTC_5x5_KHR",
	GL_COMPRESSED_RGBA_ASTC_6x5_KHR:              "GL_COMPRESSED_RGBA_ASTC_6x5_KHR",
	GL_COMPRESSED_RGBA_ASTC_6x6_KHR:              "GL_COMPRESSED_RGBA_ASTC_6x6_KHR",
	GL_COMPRESSED_RGBA_ASTC_8x5_KHR:              "GL_COMPRESSED_RGBA_ASTC_8x5_KHR",
	GL_COMPRESSED_RGBA_ASTC_8x6_KHR:              "GL_COMPRESSED_RGBA_ASTC_8x6_KHR",
	GL_COMPRESSED_RGBA_ASTC_8x8_KHR:              "GL_COMPRESSED_RGBA_ASTC_8x8_KHR",
	GL_COMPRESSED_RGBA_ASTC_10x5_KHR:             "GL_COMPRESSED_RGBA_ASTC_10x5_KHR",
	GL_COMPRESSED_RGBA_ASTC_10x6_KHR:             "GL_COMPRESSED_RGBA_ASTC_10x6_KHR",
	GL_COMPRESSED_RGBA_ASTC_10x8_KHR:             "GL_COMPRESSED_RGBA_ASTC_10x8_KHR",
	GL_COMPRESSED_RGBA_ASTC_10x10_KHR:            "GL_COMPRESSED_RGBA_ASTC_10x10_KHR",
	GL_COMPRESSED_RGBA_ASTC_12x10_KHR:            "GL_COMPRESSED_RGBA_ASTC_12x10_KHR",
	GL_COMPRESSED_RGBA_ASTC_12x12_KHR:            "GL_COMPRESSED_RGBA_ASTC_12x12_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:      "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:      "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:      "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:      "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:      "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:      "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:      "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:      "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:     "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:     "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:     "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:    "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:    "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR",
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:    "GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR",
}

func FormatString(e uint32) string {
	if s, ok := formatStrings[e]; ok {
		return s
	} else {
		return fmt.Sprintf("Invalid format(0x%X)", e)
	}
}
